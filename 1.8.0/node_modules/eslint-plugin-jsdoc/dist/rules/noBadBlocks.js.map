{"version":3,"file":"noBadBlocks.js","names":["_iterateJsdoc","_interopRequireDefault","require","_commentParser","obj","__esModule","default","commentRegexp","extraAsteriskCommentRegexp","_default","exports","iterateJsdoc","context","sourceCode","allComments","makeReport","ignore","preventAllMultiAsteriskBlocks","options","extraAsterisks","nonJsdocNodes","filter","comment","commentText","getText","sliceIndex","test","_extraAsteriskComment","multiline","exec","length","tags","commentParser","slice","some","tag","includes","node","report","fix","fixer","text","replaceText","replace","checkFile","meta","docs","description","url","fixable","schema","additionalProperties","properties","items","type","module"],"sources":["../../src/rules/noBadBlocks.js"],"sourcesContent":["import iterateJsdoc from '../iterateJsdoc.js';\nimport {\n  parse as commentParser,\n} from 'comment-parser';\n\n// Neither a single nor 3+ asterisks are valid jsdoc per\n//  https://jsdoc.app/about-getting-started.html#adding-documentation-comments-to-your-code\nconst commentRegexp = /^\\/\\*(?!\\*)/u;\nconst extraAsteriskCommentRegexp = /^\\/\\*{3,}/u;\n\nexport default iterateJsdoc(({\n  context,\n  sourceCode,\n  allComments,\n  makeReport,\n}) => {\n  const [\n    {\n      ignore = [\n        'ts-check',\n        'ts-expect-error',\n        'ts-ignore',\n        'ts-nocheck',\n      ],\n      preventAllMultiAsteriskBlocks = false,\n    } = {},\n  ] = context.options;\n\n  let extraAsterisks = false;\n  const nonJsdocNodes = /** @type {import('estree').Node[]} */ (\n    allComments\n  ).filter((comment) => {\n    const commentText = sourceCode.getText(comment);\n    let sliceIndex = 2;\n    if (!commentRegexp.test(commentText)) {\n      const multiline = extraAsteriskCommentRegexp.exec(commentText)?.[0];\n      if (!multiline) {\n        return false;\n      }\n\n      sliceIndex = multiline.length;\n      extraAsterisks = true;\n      if (preventAllMultiAsteriskBlocks) {\n        return true;\n      }\n    }\n\n    const tags = (commentParser(\n      `${commentText.slice(0, 2)}*${commentText.slice(sliceIndex)}`,\n    )[0] || {}).tags ?? [];\n\n    return tags.length && !tags.some(({\n      tag,\n    }) => {\n      return ignore.includes(tag);\n    });\n  });\n\n  if (!nonJsdocNodes.length) {\n    return;\n  }\n\n  for (const node of nonJsdocNodes) {\n    const report = /** @type {import('../iterateJsdoc.js').MakeReport} */ (\n      makeReport\n    )(context, node);\n\n    // eslint-disable-next-line no-loop-func\n    const fix = /** @type {import('eslint').Rule.ReportFixer} */ (fixer) => {\n      const text = sourceCode.getText(node);\n\n      return fixer.replaceText(\n        node,\n        extraAsterisks ?\n          text.replace(extraAsteriskCommentRegexp, '/**') :\n          text.replace('/*', '/**'),\n      );\n    };\n\n    report('Expected JSDoc-like comment to begin with two asterisks.', fix);\n  }\n}, {\n  checkFile: true,\n  meta: {\n    docs: {\n      description: 'This rule checks for multi-line-style comments which fail to meet the criteria of a jsdoc block.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-bad-blocks.md#repos-sticky-header',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          ignore: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n          preventAllMultiAsteriskBlocks: {\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'layout',\n  },\n});\n"],"mappings":"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"}