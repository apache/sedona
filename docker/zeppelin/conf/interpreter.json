{
  "interpreterSettings": {
    "python": {
      "id": "python",
      "name": "python",
      "group": "python",
      "properties": {
        "zeppelin.python": {
          "name": "zeppelin.python",
          "value": "python",
          "type": "string",
          "description": "Python binary executable path. It is set to python by default.(assume python is in your $PATH)"
        },
        "zeppelin.python.maxResult": {
          "name": "zeppelin.python.maxResult",
          "value": "1000",
          "type": "number",
          "description": "Max number of dataframe rows to display."
        },
        "zeppelin.python.useIPython": {
          "name": "zeppelin.python.useIPython",
          "value": true,
          "type": "checkbox",
          "description": "Whether use IPython when it is available in `%python`"
        },
        "zeppelin.ipython.launch.timeout": {
          "name": "zeppelin.ipython.launch.timeout",
          "value": "30000",
          "type": "number",
          "description": "Time out for ipython launch"
        },
        "zeppelin.ipython.grpc.message_size": {
          "name": "zeppelin.ipython.grpc.message_size",
          "value": "33554432",
          "type": "number",
          "description": "grpc message size, default is 32M"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "python",
          "class": "org.apache.zeppelin.python.PythonInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionSupport": true
          }
        },
        {
          "name": "ipython",
          "class": "org.apache.zeppelin.python.IPythonInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "sql",
          "class": "org.apache.zeppelin.python.PythonInterpreterPandasSql",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": false
          }
        },
        {
          "name": "conda",
          "class": "org.apache.zeppelin.python.PythonCondaInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sh",
            "editOnDblClick": false,
            "completionSupport": false
          }
        },
        {
          "name": "docker",
          "class": "org.apache.zeppelin.python.PythonDockerInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sh",
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "jdbc": {
      "id": "jdbc",
      "name": "jdbc",
      "group": "jdbc",
      "properties": {
        "default.url": {
          "name": "default.url",
          "value": "jdbc:postgresql://localhost:5432/",
          "type": "string",
          "description": "The URL for JDBC."
        },
        "default.user": {
          "name": "default.user",
          "value": "gpadmin",
          "type": "string",
          "description": "The JDBC user name"
        },
        "default.password": {
          "name": "default.password",
          "value": "",
          "type": "password",
          "description": "The JDBC user password"
        },
        "default.driver": {
          "name": "default.driver",
          "value": "org.postgresql.Driver",
          "type": "string",
          "description": "JDBC Driver Name"
        },
        "default.completer.ttlInSeconds": {
          "name": "default.completer.ttlInSeconds",
          "value": "120",
          "type": "number",
          "description": "Time to live sql completer in seconds (-1 to update every time, 0 to disable update)"
        },
        "default.completer.schemaFilters": {
          "name": "default.completer.schemaFilters",
          "value": "",
          "type": "textarea",
          "description": "Ð¡omma separated schema (schema \u003d catalog \u003d database) filters to get metadata for completions. Supports \u0027%\u0027 symbol is equivalent to any set of characters. (ex. prod_v_%,public%,info)"
        },
        "default.precode": {
          "name": "default.precode",
          "value": "",
          "type": "textarea",
          "description": "SQL which executes while opening connection"
        },
        "default.statementPrecode": {
          "name": "default.statementPrecode",
          "value": "",
          "type": "textarea",
          "description": "Runs before each run of the paragraph, in the same connection"
        },
        "common.max_count": {
          "name": "common.max_count",
          "value": "1000",
          "type": "number",
          "description": "Max number of SQL result to display."
        },
        "zeppelin.jdbc.auth.type": {
          "name": "zeppelin.jdbc.auth.type",
          "value": "",
          "type": "string",
          "description": "If auth type is needed, Example: KERBEROS"
        },
        "zeppelin.jdbc.auth.kerberos.proxy.enable": {
          "name": "zeppelin.jdbc.auth.kerberos.proxy.enable",
          "value": true,
          "type": "checkbox",
          "description": "When auth type is Kerberos, enable/disable Kerberos proxy with the login user to get the connection. Default value is true."
        },
        "zeppelin.jdbc.concurrent.use": {
          "name": "zeppelin.jdbc.concurrent.use",
          "value": true,
          "type": "checkbox",
          "description": "Use parallel scheduler"
        },
        "zeppelin.jdbc.concurrent.max_connection": {
          "name": "zeppelin.jdbc.concurrent.max_connection",
          "value": "10",
          "type": "number",
          "description": "Number of concurrent execution"
        },
        "zeppelin.jdbc.keytab.location": {
          "name": "zeppelin.jdbc.keytab.location",
          "value": "",
          "type": "string",
          "description": "Kerberos keytab location"
        },
        "zeppelin.jdbc.principal": {
          "name": "zeppelin.jdbc.principal",
          "value": "",
          "type": "string",
          "description": "Kerberos principal"
        },
        "zeppelin.jdbc.interpolation": {
          "name": "zeppelin.jdbc.interpolation",
          "value": false,
          "type": "checkbox",
          "description": "Enable ZeppelinContext variable interpolation into paragraph text"
        },
        "zeppelin.jdbc.maxConnLifetime": {
          "name": "zeppelin.jdbc.maxConnLifetime",
          "value": "-1",
          "type": "number",
          "description": "Maximum of connection lifetime in milliseconds. A value of zero or less means the connection has an infinite lifetime."
        },
        "zeppelin.jdbc.maxRows": {
          "name": "zeppelin.jdbc.maxRows",
          "value": "1000",
          "type": "number",
          "description": "Maximum number of rows fetched from the query."
        },
        "zeppelin.jdbc.hive.timeout.threshold": {
          "name": "zeppelin.jdbc.hive.timeout.threshold",
          "value": "60000",
          "type": "number",
          "description": "Timeout for hive job timeout"
        },
        "zeppelin.jdbc.hive.monitor.query_interval": {
          "name": "zeppelin.jdbc.hive.monitor.query_interval",
          "value": "1000",
          "type": "number",
          "description": "Query interval for hive statement"
        },
        "zeppelin.jdbc.hive.engines.tag.enable": {
          "name": "zeppelin.jdbc.hive.engines.tag.enable",
          "value": true,
          "type": "checkbox",
          "description": "Set application tag for applications started by hive engines"
        },
        "zeppelin.jdbc.kyuubi.timeout.threshold": {
          "name": "zeppelin.jdbc.kyuubi.timeout.threshold",
          "value": "60000",
          "type": "number",
          "description": "Timeout for kyuubi job timeout"
        },
        "zeppelin.jdbc.kyuubi.monitor.query_interval": {
          "name": "zeppelin.jdbc.kyuubi.monitor.query_interval",
          "value": "1000",
          "type": "number",
          "description": "Query interval for kyuubi statement"
        },
        "zeppelin.jdbc.kyuubi.jobUrl.template": {
          "name": "zeppelin.jdbc.kyuubi.jobUrl.template",
          "value": "",
          "type": "string",
          "description": "The Kyuubi engine URL pattern, supports {{applicationId}} as placeholder"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "sql",
          "class": "org.apache.zeppelin.jdbc.JDBCInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "influxdb": {
      "id": "influxdb",
      "name": "influxdb",
      "group": "influxdb",
      "properties": {
        "influxdb.url": {
          "name": "influxdb.url",
          "value": "http://localhost:9999",
          "type": "string",
          "description": "The URL for InfluxDB 2.X API"
        },
        "influxdb.token": {
          "name": "influxdb.token",
          "value": "my-token",
          "type": "password",
          "description": "InfluxDB auth token"
        },
        "influxdb.org": {
          "name": "influxdb.org",
          "value": "my-org",
          "type": "string",
          "description": "InfluxDB org name"
        },
        "influxdb.logLevel": {
          "name": "influxdb.logLevel",
          "value": "NONE",
          "type": "string",
          "description": "InfluxDB http client library verbosity level (NONE, BASIC, HEADERS, BODY)"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "influxdb",
          "class": "org.apache.zeppelin.influxdb.InfluxDBInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "flink-cmd": {
      "id": "flink-cmd",
      "name": "flink-cmd",
      "group": "flink-cmd",
      "properties": {
        "FLINK_HOME": {
          "name": "FLINK_HOME",
          "value": "",
          "type": "string",
          "description": "Location of flink distribution"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "cmd",
          "class": "org.apache.zeppelin.flink.cmd.FlinkCmdInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sh",
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "flink": {
      "id": "flink",
      "name": "flink",
      "group": "flink",
      "properties": {
        "FLINK_HOME": {
          "name": "FLINK_HOME",
          "value": "",
          "type": "string",
          "description": "Location of flink distribution"
        },
        "HADOOP_CONF_DIR": {
          "name": "HADOOP_CONF_DIR",
          "value": "",
          "type": "string",
          "description": "Location of hadoop conf (core-site.xml, hdfs-site.xml and etc.)"
        },
        "HIVE_CONF_DIR": {
          "name": "HIVE_CONF_DIR",
          "value": "",
          "type": "string",
          "description": "Location of hive conf (hive-site.xml)"
        },
        "flink.execution.mode": {
          "name": "flink.execution.mode",
          "value": "local",
          "type": "string",
          "description": "Execution mode, it could be local|remote|yarn"
        },
        "flink.execution.remote.host": {
          "name": "flink.execution.remote.host",
          "value": "",
          "type": "string",
          "description": "Host name of running JobManager. Only used for remote mode"
        },
        "flink.execution.remote.port": {
          "name": "flink.execution.remote.port",
          "value": "",
          "type": "number",
          "description": "Port of running JobManager. Only used for remote mode"
        },
        "jobmanager.memory.process.size": {
          "name": "jobmanager.memory.process.size",
          "value": "1024m",
          "type": "text",
          "description": "Memory for JobManager, e.g. 1024m"
        },
        "taskmanager.memory.process.size": {
          "name": "taskmanager.memory.process.size",
          "value": "1024m",
          "type": "text",
          "description": "Memory for TaskManager, e.g. 1024m"
        },
        "taskmanager.numberOfTaskSlots": {
          "name": "taskmanager.numberOfTaskSlots",
          "value": "1",
          "type": "number",
          "description": "Number of slot per TaskManager"
        },
        "local.number-taskmanager": {
          "name": "local.number-taskmanager",
          "value": "4",
          "type": "number",
          "description": "Number of TaskManager in local mode"
        },
        "yarn.application.name": {
          "name": "yarn.application.name",
          "value": "Zeppelin Flink Session",
          "type": "string",
          "description": "Yarn app name"
        },
        "yarn.application.queue": {
          "name": "yarn.application.queue",
          "value": "default",
          "type": "string",
          "description": "Yarn queue name"
        },
        "zeppelin.flink.uiWebUrl": {
          "name": "zeppelin.flink.uiWebUrl",
          "value": "",
          "type": "string",
          "description": "User specified Flink JobManager url, it could be used in remote mode where Flink cluster is already started, or could be used as url template, e.g. https://knox-server:8443/gateway/cluster-topo/yarn/proxy/{{applicationId}}/ where {{applicationId}} would be replaced with yarn app id"
        },
        "zeppelin.flink.run.asLoginUser": {
          "name": "zeppelin.flink.run.asLoginUser",
          "value": true,
          "type": "checkbox",
          "description": "Whether run flink job as the zeppelin login user, it is only applied when running flink job in hadoop yarn cluster and shiro is enabled"
        },
        "flink.udf.jars": {
          "name": "flink.udf.jars",
          "value": "",
          "type": "string",
          "description": "Flink udf jars (comma separated), Zeppelin will register udfs in this jar for user automatically, these udf jars could be either local files or hdfs files if you have hadoop installed, the udf name is the class name"
        },
        "flink.udf.jars.packages": {
          "name": "flink.udf.jars.packages",
          "value": "",
          "type": "string",
          "description": "Packages (comma separated) that would be searched for the udf defined in `flink.udf.jars`"
        },
        "flink.execution.jars": {
          "name": "flink.execution.jars",
          "value": "",
          "type": "string",
          "description": "Additional user jars (comma separated), these jars could be either local files or hdfs files if you have hadoop installed"
        },
        "flink.execution.packages": {
          "name": "flink.execution.packages",
          "value": "",
          "type": "string",
          "description": "Additional user packages (comma separated), e.g. flink connector packages"
        },
        "zeppelin.flink.scala.color": {
          "name": "zeppelin.flink.scala.color",
          "value": true,
          "type": "checkbox",
          "description": "Whether display scala shell output in colorful format"
        },
        "zeppelin.flink.scala.shell.tmp_dir": {
          "name": "zeppelin.flink.scala.shell.tmp_dir",
          "value": "",
          "type": "string",
          "description": "Temp folder for storing scala shell compiled jar"
        },
        "zeppelin.flink.enableHive": {
          "name": "zeppelin.flink.enableHive",
          "value": false,
          "type": "checkbox",
          "description": "Whether enable hive"
        },
        "zeppelin.flink.hive.version": {
          "name": "zeppelin.flink.hive.version",
          "value": "2.3.7",
          "type": "string",
          "description": "Hive version that you would like to connect"
        },
        "zeppelin.flink.module.enableHive": {
          "name": "zeppelin.flink.module.enableHive",
          "value": false,
          "type": "checkbox",
          "description": "Whether enable hive module, hive udf take precedence over flink udf if hive module is enabled."
        },
        "zeppelin.flink.printREPLOutput": {
          "name": "zeppelin.flink.printREPLOutput",
          "value": true,
          "type": "checkbox",
          "description": "Print REPL output"
        },
        "zeppelin.flink.maxResult": {
          "name": "zeppelin.flink.maxResult",
          "value": "1000",
          "type": "number",
          "description": "Max number of rows returned by sql interpreter."
        },
        "zeppelin.pyflink.python": {
          "name": "zeppelin.pyflink.python",
          "value": "python",
          "type": "string",
          "description": "Python executable for pyflink"
        },
        "flink.interpreter.close.shutdown_cluster": {
          "name": "flink.interpreter.close.shutdown_cluster",
          "value": true,
          "type": "checkbox",
          "description": "Whether shutdown flink cluster when close interpreter"
        },
        "zeppelin.interpreter.close.cancel_job": {
          "name": "zeppelin.interpreter.close.cancel_job",
          "value": true,
          "type": "checkbox",
          "description": "Whether cancel flink job when closing interpreter"
        },
        "zeppelin.flink.job.check_interval": {
          "name": "zeppelin.flink.job.check_interval",
          "value": "1000",
          "type": "number",
          "description": "Check interval (in milliseconds) to check flink job progress"
        },
        "zeppelin.flink.concurrentBatchSql.max": {
          "name": "zeppelin.flink.concurrentBatchSql.max",
          "value": "10",
          "type": "number",
          "description": "Max concurrent sql of Batch Sql"
        },
        "zeppelin.flink.concurrentStreamSql.max": {
          "name": "zeppelin.flink.concurrentStreamSql.max",
          "value": "10",
          "type": "number",
          "description": "Max concurrent sql of Stream Sql"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "flink",
          "class": "org.apache.zeppelin.flink.FlinkInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "scala",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "bsql",
          "class": "org.apache.zeppelin.flink.FlinkBatchSqlInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false
          }
        },
        {
          "name": "ssql",
          "class": "org.apache.zeppelin.flink.FlinkStreamSqlInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false
          }
        },
        {
          "name": "pyflink",
          "class": "org.apache.zeppelin.flink.PyFlinkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "ipyflink",
          "class": "org.apache.zeppelin.flink.IPyFlinkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "angular": {
      "id": "angular",
      "name": "angular",
      "group": "angular",
      "properties": {},
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "angular",
          "class": "org.apache.zeppelin.angular.AngularInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": true,
            "completionSupport": false
          }
        },
        {
          "name": "ng",
          "class": "org.apache.zeppelin.angular.AngularInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": true,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "livy": {
      "id": "livy",
      "name": "livy",
      "group": "livy",
      "properties": {
        "zeppelin.livy.url": {
          "name": "zeppelin.livy.url",
          "value": "http://localhost:8998",
          "type": "url",
          "description": "The URL for Livy Server."
        },
        "zeppelin.livy.session.create_timeout": {
          "name": "zeppelin.livy.session.create_timeout",
          "value": "120",
          "type": "number",
          "description": "Livy Server create session timeout (seconds)."
        },
        "livy.spark.driver.cores": {
          "name": "livy.spark.driver.cores",
          "value": "",
          "type": "number",
          "description": "Driver cores. ex) 1, 2"
        },
        "livy.spark.driver.memory": {
          "name": "livy.spark.driver.memory",
          "value": "",
          "type": "string",
          "description": "Driver memory. ex) 512m, 32g"
        },
        "livy.spark.executor.instances": {
          "name": "livy.spark.executor.instances",
          "value": "",
          "type": "number",
          "description": "Executor instances. ex) 1, 4"
        },
        "livy.spark.executor.cores": {
          "name": "livy.spark.executor.cores",
          "value": "",
          "type": "number",
          "description": "Num cores per executor. ex) 1, 4"
        },
        "livy.spark.executor.memory": {
          "name": "livy.spark.executor.memory",
          "value": "",
          "type": "string",
          "description": "Executor memory per worker instance. ex) 512m, 32g"
        },
        "livy.spark.dynamicAllocation.enabled": {
          "name": "livy.spark.dynamicAllocation.enabled",
          "value": false,
          "type": "checkbox",
          "description": "Use dynamic resource allocation"
        },
        "livy.spark.dynamicAllocation.cachedExecutorIdleTimeout": {
          "name": "livy.spark.dynamicAllocation.cachedExecutorIdleTimeout",
          "value": "",
          "type": "string",
          "description": "Remove an executor which has cached data blocks"
        },
        "livy.spark.dynamicAllocation.minExecutors": {
          "name": "livy.spark.dynamicAllocation.minExecutors",
          "value": "",
          "type": "number",
          "description": "Lower bound for the number of executors if dynamic allocation is enabled."
        },
        "livy.spark.dynamicAllocation.initialExecutors": {
          "name": "livy.spark.dynamicAllocation.initialExecutors",
          "value": "",
          "type": "number",
          "description": "Initial number of executors to run if dynamic allocation is enabled."
        },
        "livy.spark.dynamicAllocation.maxExecutors": {
          "name": "livy.spark.dynamicAllocation.maxExecutors",
          "value": "",
          "type": "number",
          "description": "Upper bound for the number of executors if dynamic allocation is enabled."
        },
        "zeppelin.livy.principal": {
          "name": "zeppelin.livy.principal",
          "value": "",
          "type": "string",
          "description": "Kerberos principal to authenticate livy"
        },
        "zeppelin.livy.keytab": {
          "name": "zeppelin.livy.keytab",
          "value": "",
          "type": "textarea",
          "description": "Kerberos keytab to authenticate livy"
        },
        "zeppelin.livy.pull_status.interval.millis": {
          "name": "zeppelin.livy.pull_status.interval.millis",
          "value": "1000",
          "type": "number",
          "description": "The interval for checking paragraph execution status"
        },
        "zeppelin.livy.maxLogLines": {
          "name": "zeppelin.livy.maxLogLines",
          "value": "1000",
          "type": "number",
          "description": "Max number of lines of logs"
        },
        "livy.spark.jars.packages": {
          "name": "livy.spark.jars.packages",
          "value": "",
          "type": "textarea",
          "description": "Adding extra libraries to livy interpreter"
        },
        "zeppelin.livy.displayAppInfo": {
          "name": "zeppelin.livy.displayAppInfo",
          "value": true,
          "type": "checkbox",
          "description": "Whether display app info"
        },
        "zeppelin.livy.restart_dead_session": {
          "name": "zeppelin.livy.restart_dead_session",
          "value": false,
          "type": "checkbox",
          "description": "Whether restart a dead session"
        },
        "zeppelin.livy.spark.sql.maxResult": {
          "name": "zeppelin.livy.spark.sql.maxResult",
          "value": "1000",
          "type": "number",
          "description": "Max number of Spark SQL result to display."
        },
        "zeppelin.livy.spark.sql.field.truncate": {
          "name": "zeppelin.livy.spark.sql.field.truncate",
          "value": true,
          "type": "checkbox",
          "description": "If true, truncate field values longer than 20 characters."
        },
        "zeppelin.livy.concurrentSQL": {
          "name": "zeppelin.livy.concurrentSQL",
          "value": false,
          "type": "checkbox",
          "description": "Execute multiple SQL concurrently if set true."
        },
        "zeppelin.livy.tableWithUTFCharacter": {
          "name": "zeppelin.livy.tableWithUTFCharacter",
          "value": false,
          "type": "checkbox",
          "description": "If database contains UTF characters then set this as true."
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "spark",
          "class": "org.apache.zeppelin.livy.LivySparkInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "scala",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "sql",
          "class": "org.apache.zeppelin.livy.LivySparkSQLInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "pyspark",
          "class": "org.apache.zeppelin.livy.LivyPySparkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "pyspark3",
          "class": "org.apache.zeppelin.livy.LivyPySpark3Interpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "sparkr",
          "class": "org.apache.zeppelin.livy.LivySparkRInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "shared",
          "class": "org.apache.zeppelin.livy.LivySharedInterpreter",
          "defaultInterpreter": false
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "perNote": "shared",
        "perUser": "scoped",
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "r": {
      "id": "r",
      "name": "r",
      "group": "r",
      "properties": {
        "zeppelin.R.knitr": {
          "name": "zeppelin.R.knitr",
          "value": true,
          "type": "checkbox",
          "description": "Whether use knitr or not"
        },
        "zeppelin.R.cmd": {
          "name": "zeppelin.R.cmd",
          "value": "R",
          "type": "string",
          "description": "R binary executable path"
        },
        "zeppelin.R.maxResult": {
          "name": "zeppelin.R.maxResult",
          "value": "1000",
          "type": "number",
          "description": "Max number of dataframe rows to display."
        },
        "zeppelin.R.image.width": {
          "name": "zeppelin.R.image.width",
          "value": "100%",
          "type": "number",
          "description": "Image width of R plotting"
        },
        "zeppelin.R.render.options": {
          "name": "zeppelin.R.render.options",
          "value": "out.format \u003d \u0027html\u0027, comment \u003d NA, echo \u003d FALSE, results \u003d \u0027asis\u0027, message \u003d F, warning \u003d F, fig.retina \u003d 2",
          "type": "textarea",
          "description": ""
        },
        "zeppelin.R.shiny.portRange": {
          "name": "zeppelin.R.shiny.portRange",
          "value": ":",
          "type": "string",
          "description": "Shiny app would launch a web app at some port, this property is to specify the portRange via format \u0027\u003cstart\u003e:\u003cend\u003e\u0027, e.g. \u00275000:5001\u0027. By default it is \u0027:\u0027 which means any port"
        },
        "zeppelin.R.shiny.iframe_width": {
          "name": "zeppelin.R.shiny.iframe_width",
          "value": "100%",
          "type": "text",
          "description": "Width of iframe of R shiny app"
        },
        "zeppelin.R.shiny.iframe_height": {
          "name": "zeppelin.R.shiny.iframe_height",
          "value": "500px",
          "type": "text",
          "description": "Height of iframe of R shiny app"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "r",
          "class": "org.apache.zeppelin.r.RInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionSupport": true
          }
        },
        {
          "name": "ir",
          "class": "org.apache.zeppelin.r.IRInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionSupport": true
          }
        },
        {
          "name": "shiny",
          "class": "org.apache.zeppelin.r.ShinyInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "spark-submit": {
      "id": "spark-submit",
      "name": "spark-submit",
      "group": "spark-submit",
      "properties": {
        "SPARK_HOME": {
          "name": "SPARK_HOME",
          "value": "/usr/local/lib/python3.10/dist-packages/pyspark",
          "type": "string",
          "description": "Location of spark distribution"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "submit",
          "class": "org.apache.zeppelin.spark.submit.SparkSubmitInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "sh",
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "jupyter": {
      "id": "jupyter",
      "name": "jupyter",
      "group": "jupyter",
      "properties": {},
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "jupyter",
          "class": "org.apache.zeppelin.jupyter.JupyterInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "text",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "java": {
      "id": "java",
      "name": "java",
      "group": "java",
      "properties": {},
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "java",
          "class": "org.apache.zeppelin.java.JavaInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "java",
            "editOnDblClick": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "file": {
      "id": "file",
      "name": "file",
      "group": "file",
      "properties": {
        "hdfs.url": {
          "name": "hdfs.url",
          "value": "http://localhost:50070/webhdfs/v1/",
          "type": "url",
          "description": "The URL for WebHDFS"
        },
        "hdfs.user": {
          "name": "hdfs.user",
          "value": "hdfs",
          "type": "string",
          "description": "The WebHDFS user"
        },
        "hdfs.maxlength": {
          "name": "hdfs.maxlength",
          "value": "1000",
          "type": "number",
          "description": "Maximum number of lines of results fetched"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "hdfs",
          "class": "org.apache.zeppelin.file.HDFSFileInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false,
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "groovy": {
      "id": "groovy",
      "name": "groovy",
      "group": "groovy",
      "properties": {
        "GROOVY_CLASSES": {
          "name": "GROOVY_CLASSES",
          "value": "",
          "type": "textarea",
          "description": "The path for custom groovy classes location. If empty `./interpreter/groovy/classes`"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "groovy",
          "class": "org.apache.zeppelin.groovy.GroovyInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "neo4j": {
      "id": "neo4j",
      "name": "neo4j",
      "group": "neo4j",
      "properties": {
        "neo4j.url": {
          "name": "neo4j.url",
          "value": "bolt://localhost:7687",
          "type": "string",
          "description": "The Neo4j\u0027s BOLT url."
        },
        "neo4j.database": {
          "name": "neo4j.database",
          "value": "",
          "type": "string",
          "description": "The Neo4j target database, if empty use the default db."
        },
        "neo4j.multi.statement": {
          "name": "neo4j.multi.statement",
          "value": "true",
          "type": "string",
          "description": "Enables the multi statement management, if true it computes multiple queries separated by semicolon."
        },
        "neo4j.auth.type": {
          "name": "neo4j.auth.type",
          "value": "BASIC",
          "type": "string",
          "description": "The Neo4j\u0027s authentication type (NONE, BASIC)."
        },
        "neo4j.auth.user": {
          "name": "neo4j.auth.user",
          "value": "",
          "type": "string",
          "description": "The Neo4j user name."
        },
        "neo4j.auth.password": {
          "name": "neo4j.auth.password",
          "value": "",
          "type": "string",
          "description": "The Neo4j user password."
        },
        "neo4j.max.concurrency": {
          "name": "neo4j.max.concurrency",
          "value": "50",
          "type": "string",
          "description": "Max concurrency call from Zeppelin to Neo4j server."
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "neo4j",
          "class": "org.apache.zeppelin.graph.neo4j.Neo4jCypherInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "elasticsearch": {
      "id": "elasticsearch",
      "name": "elasticsearch",
      "group": "elasticsearch",
      "properties": {
        "elasticsearch.host": {
          "name": "elasticsearch.host",
          "value": "localhost",
          "type": "string",
          "description": "The host for Elasticsearch"
        },
        "elasticsearch.port": {
          "name": "elasticsearch.port",
          "value": "9300",
          "type": "number",
          "description": "The port for Elasticsearch"
        },
        "elasticsearch.client.type": {
          "name": "elasticsearch.client.type",
          "value": "transport",
          "type": "string",
          "description": "The type of client for Elasticsearch (transport or http or https)"
        },
        "elasticsearch.cluster.name": {
          "name": "elasticsearch.cluster.name",
          "value": "elasticsearch",
          "type": "string",
          "description": "The cluster name for Elasticsearch"
        },
        "elasticsearch.result.size": {
          "name": "elasticsearch.result.size",
          "value": "10",
          "type": "number",
          "description": "The size of the result set of a search query"
        },
        "elasticsearch.basicauth.username": {
          "name": "elasticsearch.basicauth.username",
          "value": "",
          "type": "string",
          "description": "Username for a basic authentication"
        },
        "elasticsearch.basicauth.password": {
          "name": "elasticsearch.basicauth.password",
          "value": "",
          "type": "password",
          "description": "Password for a basic authentication"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "elasticsearch",
          "class": "org.apache.zeppelin.elasticsearch.ElasticsearchInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false,
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "sh": {
      "id": "sh",
      "name": "sh",
      "group": "sh",
      "properties": {
        "shell.command.timeout.millisecs": {
          "name": "shell.command.timeout.millisecs",
          "value": "60000",
          "type": "number",
          "description": "Shell command time out in millisecs. Default \u003d 60000"
        },
        "shell.command.timeout.check.interval": {
          "name": "shell.command.timeout.check.interval",
          "value": "60000",
          "type": "number",
          "description": "Shell command output check interval in millisecs. Default \u003d 10000"
        },
        "shell.working.directory.user.home": {
          "name": "shell.working.directory.user.home",
          "value": false,
          "type": "checkbox",
          "description": "If this set to true, the shell\u0027s working directory will be set to user home"
        },
        "zeppelin.shell.auth.type": {
          "name": "zeppelin.shell.auth.type",
          "value": "",
          "type": "string",
          "description": "If auth type is needed, Example: KERBEROS"
        },
        "zeppelin.shell.keytab.location": {
          "name": "zeppelin.shell.keytab.location",
          "value": "",
          "type": "string",
          "description": "Kerberos keytab location"
        },
        "zeppelin.shell.principal": {
          "name": "zeppelin.shell.principal",
          "value": "",
          "type": "string",
          "description": "Kerberos principal"
        },
        "zeppelin.shell.interpolation": {
          "name": "zeppelin.shell.interpolation",
          "value": false,
          "type": "checkbox",
          "description": "Enable ZeppelinContext variable interpolation into paragraph text"
        },
        "zeppelin.concurrency.max": {
          "name": "zeppelin.concurrency.max",
          "value": "10",
          "type": "number",
          "description": "Max concurrency of shell interpreter"
        },
        "zeppelin.terminal.ip.mapping": {
          "name": "zeppelin.terminal.ip.mapping",
          "value": "",
          "type": "string",
          "description": "Internal and external IP mapping of zeppelin server"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "sh",
          "class": "org.apache.zeppelin.shell.ShellInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "sh",
            "editOnDblClick": false,
            "completionSupport": false
          }
        },
        {
          "name": "terminal",
          "class": "org.apache.zeppelin.shell.TerminalInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sh",
            "editOnDblClick": false,
            "completionSupport": false
          },
          "config": {
            "checkEmpty": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "spark": {
      "id": "spark",
      "name": "spark",
      "group": "spark",
      "properties": {
        "SPARK_HOME": {
          "name": "SPARK_HOME",
          "value": "/usr/local/lib/python3.10/dist-packages/pyspark",
          "type": "string",
          "description": "Location of spark distribution"
        },
        "spark.master": {
          "name": "spark.master",
          "value": "local[*]",
          "type": "string",
          "description": "Spark master uri. local | yarn-client | yarn-cluster | spark master address of standalone mode, ex) spark://master_host:7077"
        },
        "spark.submit.deployMode": {
          "name": "spark.submit.deployMode",
          "value": "",
          "type": "string",
          "description": "The deploy mode of Spark driver program, either \"client\" or \"cluster\", Which means to launch driver program locally (\"client\") or remotely (\"cluster\") on one of the nodes inside the cluster."
        },
        "spark.app.name": {
          "name": "spark.app.name",
          "value": "",
          "type": "string",
          "description": "The name of spark application."
        },
        "spark.driver.cores": {
          "name": "spark.driver.cores",
          "value": "1",
          "type": "number",
          "description": "Number of cores to use for the driver process, only in cluster mode."
        },
        "spark.driver.memory": {
          "name": "spark.driver.memory",
          "value": "1g",
          "type": "string",
          "description": "Amount of memory to use for the driver process, i.e. where SparkContext is initialized, in the same format as JVM memory strings with a size unit suffix (\"k\", \"m\", \"g\" or \"t\") (e.g. 512m, 2g)."
        },
        "spark.executor.cores": {
          "name": "spark.executor.cores",
          "value": "1",
          "type": "number",
          "description": "The number of cores to use on each executor"
        },
        "spark.executor.memory": {
          "name": "spark.executor.memory",
          "value": "1g",
          "type": "string",
          "description": "Executor memory per worker instance. ex) 512m, 32g"
        },
        "spark.executor.instances": {
          "name": "spark.executor.instances",
          "value": "2",
          "type": "number",
          "description": "The number of executors for static allocation."
        },
        "spark.files": {
          "name": "spark.files",
          "value": "",
          "type": "string",
          "description": "Comma-separated list of files to be placed in the working directory of each executor. Globs are allowed."
        },
        "spark.jars": {
          "name": "spark.jars",
          "value": "",
          "type": "string",
          "description": "Comma-separated list of jars to include on the driver and executor classpaths. Globs are allowed."
        },
        "spark.jars.packages": {
          "name": "spark.jars.packages",
          "value": "",
          "type": "string",
          "description": "Comma-separated list of Maven coordinates of jars to include on the driver and executor classpaths. The coordinates should be groupId:artifactId:version. If spark.jars.ivySettings is given artifacts will be resolved according to the configuration in the file, otherwise artifacts will be searched for in the local maven repo, then maven central and finally any additional remote repositories given by the command-line option --repositories."
        },
        "zeppelin.spark.useHiveContext": {
          "name": "zeppelin.spark.useHiveContext",
          "value": true,
          "type": "checkbox",
          "description": "Use HiveContext instead of SQLContext if it is true. Enable hive for SparkSession."
        },
        "zeppelin.spark.run.asLoginUser": {
          "name": "zeppelin.spark.run.asLoginUser",
          "value": true,
          "type": "checkbox",
          "description": "Whether run spark job as the zeppelin login user, it is only applied when running spark job in hadoop yarn cluster and shiro is enabled"
        },
        "zeppelin.spark.printREPLOutput": {
          "name": "zeppelin.spark.printREPLOutput",
          "value": true,
          "type": "checkbox",
          "description": "Print scala REPL output"
        },
        "zeppelin.spark.maxResult": {
          "name": "zeppelin.spark.maxResult",
          "value": "1000",
          "type": "number",
          "description": "Max number of Spark SQL result to display."
        },
        "zeppelin.spark.enableSupportedVersionCheck": {
          "name": "zeppelin.spark.enableSupportedVersionCheck",
          "value": true,
          "type": "checkbox",
          "description": "Whether checking supported spark version. Developer only setting, not for production use"
        },
        "zeppelin.spark.uiWebUrl": {
          "name": "zeppelin.spark.uiWebUrl",
          "value": "",
          "type": "string",
          "description": "Override Spark UI default URL. In Kubernetes mode, value can be Jinja template string with 3 template variables \u0027PORT\u0027, \u0027SERVICE_NAME\u0027 and \u0027SERVICE_DOMAIN\u0027. (ex: http://{{PORT}}-{{SERVICE_NAME}}.{{SERVICE_DOMAIN}})"
        },
        "zeppelin.spark.ui.hidden": {
          "name": "zeppelin.spark.ui.hidden",
          "value": false,
          "type": "checkbox",
          "description": "Whether hide spark ui in zeppelin ui"
        },
        "spark.webui.yarn.useProxy": {
          "name": "spark.webui.yarn.useProxy",
          "value": false,
          "type": "checkbox",
          "description": "whether use yarn proxy url as spark weburl, e.g. http://localhost:8088/proxy/application_1583396598068_0004"
        },
        "zeppelin.spark.scala.color": {
          "name": "zeppelin.spark.scala.color",
          "value": true,
          "type": "checkbox",
          "description": "Whether enable color output of spark scala interpreter"
        },
        "zeppelin.spark.deprecatedMsg.show": {
          "name": "zeppelin.spark.deprecatedMsg.show",
          "value": true,
          "type": "checkbox",
          "description": "Whether show the spark deprecated message, prior Spark 3.3 are deprecated. Zeppelin will display warning message by default"
        },
        "zeppelin.spark.concurrentSQL": {
          "name": "zeppelin.spark.concurrentSQL",
          "value": true,
          "type": "checkbox",
          "description": "Execute multiple SQL concurrently if set true."
        },
        "zeppelin.spark.concurrentSQL.max": {
          "name": "zeppelin.spark.concurrentSQL.max",
          "value": "10",
          "type": "number",
          "description": "Max number of SQL concurrently executed"
        },
        "zeppelin.spark.sql.stacktrace": {
          "name": "zeppelin.spark.sql.stacktrace",
          "value": true,
          "type": "checkbox",
          "description": "Show full exception stacktrace for SQL queries if set to true."
        },
        "zeppelin.spark.sql.interpolation": {
          "name": "zeppelin.spark.sql.interpolation",
          "value": false,
          "type": "checkbox",
          "description": "Enable ZeppelinContext variable interpolation into spark sql"
        },
        "PYSPARK_PYTHON": {
          "name": "PYSPARK_PYTHON",
          "value": "python3",
          "type": "string",
          "description": "Python binary executable to use for PySpark in both driver and workers (default is python2.7 if available, otherwise python). Property `spark.pyspark.python` take precedence if it is set"
        },
        "PYSPARK_DRIVER_PYTHON": {
          "name": "PYSPARK_DRIVER_PYTHON",
          "value": "jupyter",
          "type": "string",
          "description": "Python binary executable to use for PySpark in driver only (default is `PYSPARK_PYTHON`). Property `spark.pyspark.driver.python` take precedence if it is set"
        },
        "zeppelin.pyspark.useIPython": {
          "name": "zeppelin.pyspark.useIPython",
          "value": true,
          "type": "checkbox",
          "description": "Whether use IPython when it is available"
        },
        "zeppelin.R.knitr": {
          "name": "zeppelin.R.knitr",
          "value": true,
          "type": "checkbox",
          "description": "Whether use knitr or not"
        },
        "zeppelin.R.cmd": {
          "name": "zeppelin.R.cmd",
          "value": "R",
          "type": "string",
          "description": "R binary executable path"
        },
        "zeppelin.R.image.width": {
          "name": "zeppelin.R.image.width",
          "value": "100%",
          "type": "number",
          "description": "Image width of R plotting"
        },
        "zeppelin.R.render.options": {
          "name": "zeppelin.R.render.options",
          "value": "out.format \u003d \u0027html\u0027, comment \u003d NA, echo \u003d FALSE, results \u003d \u0027asis\u0027, message \u003d F, warning \u003d F, fig.retina \u003d 2",
          "type": "textarea",
          "description": ""
        },
        "zeppelin.R.shiny.portRange": {
          "name": "zeppelin.R.shiny.portRange",
          "value": ":",
          "type": "string",
          "description": "Shiny app would launch a web app at some port, this property is to specify the portRange via format \u0027\u003cstart\u003e:\u003cend\u003e\u0027, e.g. \u00275000:5001\u0027. By default it is \u0027:\u0027 which means any port"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "spark",
          "class": "org.apache.zeppelin.spark.SparkInterpreter",
          "defaultInterpreter": true,
          "editor": {
            "language": "scala",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "sql",
          "class": "org.apache.zeppelin.spark.SparkSqlInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "pyspark",
          "class": "org.apache.zeppelin.spark.PySparkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionKey": "TAB",
            "completionSupport": true
          }
        },
        {
          "name": "ipyspark",
          "class": "org.apache.zeppelin.spark.IPySparkInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "python",
            "editOnDblClick": false,
            "completionSupport": true,
            "completionKey": "TAB"
          }
        },
        {
          "name": "r",
          "class": "org.apache.zeppelin.spark.SparkRInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionSupport": false,
            "completionKey": "TAB"
          }
        },
        {
          "name": "ir",
          "class": "org.apache.zeppelin.spark.SparkIRInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionSupport": true,
            "completionKey": "TAB"
          }
        },
        {
          "name": "shiny",
          "class": "org.apache.zeppelin.spark.SparkShinyInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "r",
            "editOnDblClick": false,
            "completionSupport": true,
            "completionKey": "TAB"
          }
        }
      ],
      "dependencies": [
        {
          "groupArtifactVersion": "/usr/local/lib/python3.10/dist-packages/pyspark/jars/sedona-spark-shaded-3.4_2.12-1.7.0.jar",
          "local": false
        }
      ],
      "option": {
        "remote": true,
        "port": -1,
        "perNote": "shared",
        "perUser": "shared",
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "cassandra": {
      "id": "cassandra",
      "name": "cassandra",
      "group": "cassandra",
      "properties": {
        "cassandra.hosts": {
          "name": "cassandra.hosts",
          "value": "localhost",
          "type": "textarea",
          "description": "Comma separated Cassandra hosts (DNS name or IP address). Default \u003d localhost. Ex: \u0027192.168.0.12,node2,node3\u0027"
        },
        "cassandra.native.port": {
          "name": "cassandra.native.port",
          "value": "9042",
          "type": "number",
          "description": "Cassandra native port. Default \u003d 9042"
        },
        "cassandra.protocol.version": {
          "name": "cassandra.protocol.version",
          "value": "DEFAULT",
          "type": "string",
          "description": "Cassandra protocol version. Default \u003d auto-detect"
        },
        "cassandra.cluster": {
          "name": "cassandra.cluster",
          "value": "Test Cluster",
          "type": "string",
          "description": "Cassandra cluster name. Default \u003d \u0027Test Cluster\u0027"
        },
        "cassandra.keyspace": {
          "name": "cassandra.keyspace",
          "value": "system",
          "type": "string",
          "description": "Cassandra keyspace name. Default \u003d \u0027system\u0027"
        },
        "cassandra.compression.protocol": {
          "name": "cassandra.compression.protocol",
          "value": "NONE",
          "type": "string",
          "description": "Cassandra compression protocol. Available values: NONE, SNAPPY, LZ4. Default \u003d NONE"
        },
        "cassandra.credentials.username": {
          "name": "cassandra.credentials.username",
          "value": "none",
          "type": "string",
          "description": "Cassandra credentials username. Default \u003d \u0027none\u0027"
        },
        "cassandra.credentials.password": {
          "name": "cassandra.credentials.password",
          "value": "none",
          "type": "password",
          "description": "Cassandra credentials password. Default \u003d \u0027none\u0027"
        },
        "cassandra.load.balancing.policy": {
          "name": "cassandra.load.balancing.policy",
          "value": "DEFAULT",
          "type": "string",
          "description": "Class name for Load Balancing Policy. Default \u003d DefaultLoadBalancingPolicy"
        },
        "cassandra.retry.policy": {
          "name": "cassandra.retry.policy",
          "value": "DEFAULT",
          "type": "string",
          "description": "Class name for Retry Policy. Default \u003d DefaultRetryPolicy"
        },
        "cassandra.reconnection.policy": {
          "name": "cassandra.reconnection.policy",
          "value": "DEFAULT",
          "type": "string",
          "description": "Class name for Reconnection Policy. Default \u003d ExponentialReconnectionPolicy"
        },
        "cassandra.speculative.execution.policy": {
          "name": "cassandra.speculative.execution.policy",
          "value": "DEFAULT",
          "type": "string",
          "description": "Class name for Speculative Execution Policy. Default \u003d NoSpeculativeExecutionPolicy"
        },
        "cassandra.interpreter.parallelism": {
          "name": "cassandra.interpreter.parallelism",
          "value": "10",
          "type": "number",
          "description": "Cassandra interpreter parallelism.Default \u003d 10"
        },
        "cassandra.max.schema.agreement.wait.second": {
          "name": "cassandra.max.schema.agreement.wait.second",
          "value": "10",
          "type": "number",
          "description": "Cassandra max schema agreement wait in second.Default \u003d ProtocolOptions.DEFAULT_MAX_SCHEMA_AGREEMENT_WAIT_SECONDS"
        },
        "cassandra.pooling.connection.per.host.local": {
          "name": "cassandra.pooling.connection.per.host.local",
          "value": "1",
          "type": "number",
          "description": "Cassandra connections per host local. Protocol V3 and above default \u003d 1"
        },
        "cassandra.pooling.connection.per.host.remote": {
          "name": "cassandra.pooling.connection.per.host.remote",
          "value": "1",
          "type": "number",
          "description": "Cassandra connections per host remote. Protocol V3 and above default \u003d 1"
        },
        "cassandra.pooling.max.request.per.connection": {
          "name": "cassandra.pooling.max.request.per.connection",
          "value": "1024",
          "type": "number",
          "description": "Cassandra max requests per connection. Protocol V3 and above default \u003d 1024"
        },
        "cassandra.pooling.pool.timeout.millisecs": {
          "name": "cassandra.pooling.pool.timeout.millisecs",
          "value": "5000",
          "type": "number",
          "description": "Cassandra pool time out in millisecs. Default \u003d 5000"
        },
        "cassandra.pooling.heartbeat.interval.seconds": {
          "name": "cassandra.pooling.heartbeat.interval.seconds",
          "value": "30",
          "type": "number",
          "description": "Cassandra pool heartbeat interval in secs. Default \u003d 30"
        },
        "cassandra.query.default.consistency": {
          "name": "cassandra.query.default.consistency",
          "value": "ONE",
          "type": "string",
          "description": "Cassandra query default consistency level. Default \u003d ONE"
        },
        "cassandra.query.default.serial.consistency": {
          "name": "cassandra.query.default.serial.consistency",
          "value": "SERIAL",
          "type": "string",
          "description": "Cassandra query default serial consistency level. Default \u003d SERIAL"
        },
        "cassandra.query.default.fetchSize": {
          "name": "cassandra.query.default.fetchSize",
          "value": "5000",
          "type": "number",
          "description": "Cassandra query default fetch size. Default \u003d 5000"
        },
        "cassandra.socket.connection.timeout.millisecs": {
          "name": "cassandra.socket.connection.timeout.millisecs",
          "value": "5000",
          "type": "number",
          "description": "Cassandra socket default connection timeout in millisecs. Default \u003d 5000"
        },
        "cassandra.socket.read.timeout.millisecs": {
          "name": "cassandra.socket.read.timeout.millisecs",
          "value": "12000",
          "type": "number",
          "description": "Cassandra socket read timeout in millisecs. Default \u003d 12000"
        },
        "cassandra.socket.tcp.no_delay": {
          "name": "cassandra.socket.tcp.no_delay",
          "value": true,
          "type": "checkbox",
          "description": "Cassandra socket TCP no delay. Default \u003d true"
        },
        "cassandra.ssl.enabled": {
          "name": "cassandra.ssl.enabled",
          "value": false,
          "type": "checkbox",
          "description": "Cassandra SSL"
        },
        "cassandra.ssl.truststore.path": {
          "name": "cassandra.ssl.truststore.path",
          "value": "none",
          "type": "string",
          "description": "Cassandra truststore path. Default \u003d none"
        },
        "cassandra.ssl.truststore.password": {
          "name": "cassandra.ssl.truststore.password",
          "value": "none",
          "type": "password",
          "description": "Cassandra truststore password. Default \u003d none"
        },
        "cassandra.format.output": {
          "name": "cassandra.format.output",
          "value": "human",
          "type": "string",
          "description": "Output format: human-readable, or strict CQL. Default \u003d human"
        },
        "cassandra.format.locale": {
          "name": "cassandra.format.locale",
          "value": "en_US",
          "type": "string",
          "description": "Locale for formatting of output data. Default \u003d en_US"
        },
        "cassandra.format.timezone": {
          "name": "cassandra.format.timezone",
          "value": "UTC",
          "type": "string",
          "description": "Timezone for output of time/date-related values. Default \u003d UTC"
        },
        "cassandra.format.timestamp": {
          "name": "cassandra.format.timestamp",
          "value": "yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSSXXX",
          "type": "string",
          "description": "Format string for timestamp columns"
        },
        "cassandra.format.date": {
          "name": "cassandra.format.date",
          "value": "yyyy-MM-dd",
          "type": "string",
          "description": "Format string for date columns"
        },
        "cassandra.format.time": {
          "name": "cassandra.format.time",
          "value": "HH:mm:ss.SSS",
          "type": "string",
          "description": "Format string for time columns"
        },
        "cassandra.format.float_precision": {
          "name": "cassandra.format.float_precision",
          "value": "5",
          "type": "number",
          "description": "Precision for formatting of float values"
        },
        "cassandra.format.double_precision": {
          "name": "cassandra.format.double_precision",
          "value": "12",
          "type": "number",
          "description": "Precision for formatting of double values"
        },
        "cassandra.format.decimal_precision": {
          "name": "cassandra.format.decimal_precision",
          "value": "-1",
          "type": "number",
          "description": "Precision for formatting of decimal values (by default, show everything)"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "cassandra",
          "class": "org.apache.zeppelin.cassandra.CassandraInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "md": {
      "id": "md",
      "name": "md",
      "group": "md",
      "properties": {
        "markdown.parser.type": {
          "name": "markdown.parser.type",
          "value": "flexmark",
          "type": "string",
          "description": "Markdown Parser Type. Available values: markdown4j, flexmark. Default \u003d flexmark"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "md",
          "class": "org.apache.zeppelin.markdown.Markdown",
          "defaultInterpreter": false,
          "editor": {
            "language": "markdown",
            "editOnDblClick": true,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "alluxio": {
      "id": "alluxio",
      "name": "alluxio",
      "group": "alluxio",
      "properties": {
        "alluxio.master.hostname": {
          "name": "alluxio.master.hostname",
          "value": "localhost",
          "type": "string",
          "description": "Alluxio master hostname"
        },
        "alluxio.master.port": {
          "name": "alluxio.master.port",
          "value": "19998",
          "type": "number",
          "description": "Alluxio master port"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "alluxio",
          "class": "org.apache.zeppelin.alluxio.AlluxioInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false,
            "completionSupport": true
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "bigquery": {
      "id": "bigquery",
      "name": "bigquery",
      "group": "bigquery",
      "properties": {
        "zeppelin.bigquery.project_id": {
          "name": "zeppelin.bigquery.project_id",
          "value": " ",
          "type": "string",
          "description": "Google Project ID"
        },
        "zeppelin.bigquery.wait_time": {
          "name": "zeppelin.bigquery.wait_time",
          "value": "5000",
          "type": "number",
          "description": "Query timeout in Milliseconds"
        },
        "zeppelin.bigquery.max_no_of_rows": {
          "name": "zeppelin.bigquery.max_no_of_rows",
          "value": "100000",
          "type": "number",
          "description": "Maximum number of rows to fetch from BigQuery"
        },
        "zeppelin.bigquery.sql_dialect": {
          "name": "zeppelin.bigquery.sql_dialect",
          "value": "",
          "type": "string",
          "description": "BigQuery SQL dialect (standardSQL or legacySQL). If empty, query prefix like \u0027#standardSQL\u0027 can be used."
        },
        "zeppelin.bigquery.region": {
          "name": "zeppelin.bigquery.region",
          "value": "",
          "type": "string",
          "description": "Location of BigQuery dataset. Needed if it is a single-region dataset."
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "sql",
          "class": "org.apache.zeppelin.bigquery.BigQueryInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sql",
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "sparql": {
      "id": "sparql",
      "name": "sparql",
      "group": "sparql",
      "properties": {
        "sparql.engine": {
          "name": "sparql.engine",
          "value": "jena",
          "type": "string",
          "description": "The sparql engine to use for the queries. Default: jena"
        },
        "sparql.endpoint": {
          "name": "sparql.endpoint",
          "value": "http://dbpedia.org/sparql",
          "type": "string",
          "description": "Complete URL of the endpoint. Default: http://dbpedia.org/sparql"
        },
        "sparql.replaceURIs": {
          "name": "sparql.replaceURIs",
          "value": true,
          "type": "checkbox",
          "description": "Replace the URIs in the result with the prefixes. Default: true"
        },
        "sparql.removeDatatypes": {
          "name": "sparql.removeDatatypes",
          "value": true,
          "type": "checkbox",
          "description": "Remove the datatypes from Literals so Zeppelin can use the values. Default: true"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "sparql",
          "class": "org.apache.zeppelin.sparql.SparqlInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "sparql",
            "editOnDblClick": false,
            "completionKey": "TAB"
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "mongodb": {
      "id": "mongodb",
      "name": "mongodb",
      "group": "mongodb",
      "properties": {
        "mongo.shell.path": {
          "name": "mongo.shell.path",
          "value": "mongosh",
          "type": "string",
          "description": "MongoDB shell local path"
        },
        "mongo.shell.command.table.limit": {
          "name": "mongo.shell.command.table.limit",
          "value": "1000",
          "type": "number",
          "description": "Limit of documents displayed in a table"
        },
        "mongo.shell.command.timeout": {
          "name": "mongo.shell.command.timeout",
          "value": "60000",
          "type": "number",
          "description": "MongoDB shell command timeout"
        },
        "mongo.server.host": {
          "name": "mongo.server.host",
          "value": "localhost",
          "type": "string",
          "description": "MongoDB server host to connect to"
        },
        "mongo.server.port": {
          "name": "mongo.server.port",
          "value": "27017",
          "type": "number",
          "description": "MongoDB server port to connect to"
        },
        "mongo.server.database": {
          "name": "mongo.server.database",
          "value": "test",
          "type": "string",
          "description": "MongoDB database name"
        },
        "mongo.server.authenticationDatabase": {
          "name": "mongo.server.authenticationDatabase",
          "value": "",
          "type": "string",
          "description": "MongoDB database name for authentication"
        },
        "mongo.server.username": {
          "name": "mongo.server.username",
          "value": "",
          "type": "string",
          "description": "Username for authentication"
        },
        "mongo.server.password": {
          "name": "mongo.server.password",
          "value": "",
          "type": "password",
          "description": "Password for authentication"
        },
        "mongo.interpreter.concurrency.max": {
          "name": "mongo.interpreter.concurrency.max",
          "value": "10",
          "type": "number",
          "description": "Max count of scheduler concurrency"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "mongodb",
          "class": "org.apache.zeppelin.mongodb.MongoDbInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "language": "javascript",
            "editOnDblClick": false,
            "completionKey": "TAB"
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    },
    "hbase": {
      "id": "hbase",
      "name": "hbase",
      "group": "hbase",
      "properties": {
        "hbase.home": {
          "name": "hbase.home",
          "value": "/usr/lib/hbase/",
          "type": "string",
          "description": "Installation directory of HBase"
        },
        "hbase.ruby.sources": {
          "name": "hbase.ruby.sources",
          "value": "lib/ruby",
          "type": "string",
          "description": "Path to Ruby scripts relative to \u0027hbase.home\u0027"
        },
        "zeppelin.hbase.test.mode": {
          "name": "zeppelin.hbase.test.mode",
          "value": false,
          "type": "checkbox",
          "description": "Disable checks for unit and manual tests"
        }
      },
      "status": "READY",
      "interpreterGroup": [
        {
          "name": "hbase",
          "class": "org.apache.zeppelin.hbase.HbaseInterpreter",
          "defaultInterpreter": false,
          "editor": {
            "editOnDblClick": false,
            "completionSupport": false
          }
        }
      ],
      "dependencies": [],
      "option": {
        "remote": true,
        "port": -1,
        "isExistingProcess": false,
        "setPermission": false,
        "owners": [],
        "isUserImpersonate": false
      }
    }
  },
  "interpreterRepositories": [
    {
      "id": "central",
      "type": "default",
      "url": "https://repo1.maven.org/maven2/",
      "host": "repo1.maven.org",
      "protocol": "https",
      "releasePolicy": {
        "enabled": true,
        "updatePolicy": "daily",
        "checksumPolicy": "warn"
      },
      "snapshotPolicy": {
        "enabled": true,
        "updatePolicy": "daily",
        "checksumPolicy": "warn"
      },
      "mirroredRepositories": [],
      "repositoryManager": false
    },
    {
      "id": "local",
      "type": "default",
      "url": "file:///root/.m2/repository",
      "host": "",
      "protocol": "file",
      "releasePolicy": {
        "enabled": true,
        "updatePolicy": "daily",
        "checksumPolicy": "warn"
      },
      "snapshotPolicy": {
        "enabled": true,
        "updatePolicy": "daily",
        "checksumPolicy": "warn"
      },
      "mirroredRepositories": [],
      "repositoryManager": false
    }
  ]
}
