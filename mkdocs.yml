# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

site_name: Apache Sedona&trade;
site_url: https://sedona.apache.org
site_description: Apache Sedona&trade; is a cluster computing system for processing large-scale spatial data. Sedona extends existing cluster computing systems, such as Apache Spark, Apache Flink, and Snowflake, with a set of out-of-the-box distributed Spatial Datasets and Spatial SQL that efficiently load, process, and analyze large-scale spatial data across machines.
nav:
  - Home: index.md
  - Setup:
      - Overview: setup/overview.md
      - Supported platforms:
          - Sedona with Apache Spark:
              - Modules: setup/modules.md
              - Language wrappers: setup/platform.md
          - Sedona with Apache Flink:
              - Modules: setup/flink/modules.md
              - Language wrappers: setup/flink/platform.md
          - Sedona with Snowflake:
              - Modules: setup/snowflake/modules.md
      - Maven Central coordinate: setup/maven-coordinates.md
      - Install with Apache Spark:
          - Install Sedona Scala/Java: setup/install-scala.md
          - Install Sedona Python: setup/install-python.md
          - Install Sedona R: api/rdocs
          - Install Sedona-Zeppelin: setup/zeppelin.md
          - Play Sedona in Docker: setup/docker.md
          - Install on Wherobots: setup/wherobots.md
          - Install on Databricks: setup/databricks.md
          - Install on AWS EMR: setup/emr.md
          - Install on AWS Glue: setup/glue.md
          - Install on Microsoft Fabric: setup/fabric.md
          - Set up Spark cluster manually: setup/cluster.md
          - Install on Azure Synpase Analytics: setup/azure-synapse-analytics.md
      - Install with Apache Flink:
          - Install Sedona Scala/Java: setup/flink/install-scala.md
      - Install with Snowflake:
          - Install Sedona SQL: setup/snowflake/install.md
      - Release notes: setup/release-notes.md
      - Compile the code: setup/compile.md
  - Download: download.md
  - Programming Guides:
      - Sedona with Apache Spark:
          - Spatial SQL app: tutorial/sql.md
          - Raster SQL app: tutorial/raster.md
          - Pure SQL environment: tutorial/sql-pure-sql.md
          - Spatial RDD app: tutorial/rdd.md
          - Sedona R: api/rdocs
          - Work with GeoPandas and Shapely: tutorial/geopandas-shapely.md
          - Map visualization SQL app:
              - Scala/Java: tutorial/viz.md
              - Use Apache Zeppelin: tutorial/zeppelin.md
              - Gallery: tutorial/viz-gallery.md
          - Performance tuning:
              - Benchmark: tutorial/benchmark.md
              - Tune RDD application: tutorial/Advanced-Tutorial-Tune-your-Application.md
              - Storing large raster geometries in Parquet files: tutorial/storing-blobs-in-parquet.md
      - Sedona with Apache Flink:
          - Spatial SQL app (Flink): tutorial/flink/sql.md
      - Sedona with Snowflake:
          - Spatial SQL app (Snowflake): tutorial/snowflake/sql.md
      - Examples:
          - Scala/Java: tutorial/demo.md
          - Python: tutorial/jupyter-notebook.md
  - API Docs:
      - Sedona with Apache Spark:
          - SQL:
              - Quick start: api/sql/Overview.md
              - Vector data:
                  - Constructor: api/sql/Constructor.md
                  - Function: api/sql/Function.md
                  - Predicate: api/sql/Predicate.md
                  - Aggregate function: api/sql/AggregateFunction.md
                  - DataFrame Style functions: api/sql/DataFrameAPI.md
                  - Query optimization: api/sql/Optimizer.md
                  - Nearest-Neighbour searching: api/sql/NearestNeighbourSearching.md
                  - "Spider:Spatial Data Generator": api/sql/Spider.md
                  - Reading Legacy Parquet Files: api/sql/Reading-legacy-parquet.md
                  - Visualization:
                      - SedonaPyDeck: api/sql/Visualization_SedonaPyDeck.md
                      - SedonaKepler: api/sql/Visualization_SedonaKepler.md
              - Raster data:
                  - Raster loader: api/sql/Raster-loader.md
                  - Raster aggregates: api/sql/Raster-aggregate-function.md
                  - Raster writer: api/sql/Raster-writer.md
                  - Raster operators: api/sql/Raster-operators.md
                  - Raster map algebra: api/sql/Raster-map-algebra.md
                  - Raster visualization: api/sql/Raster-visualizer.md
                  - Raster affine transformation: api/sql/Raster-affine-transformation.md
              - Parameter: api/sql/Parameter.md
          - RDD (core):
              - Scala/Java doc: api/java-api.md
          - Stats:
              - DataFrame: api/stats/sql.md
          - Viz:
              - DataFrame/SQL: api/viz/sql.md
              - RDD: api/viz/java-api.md
          - Sedona R: api/rdocs
      - Sedona with Apache Flink:
          - SQL:
              - Overview (Flink): api/flink/Overview.md
              - Constructor (Flink): api/flink/Constructor.md
              - Function (Flink): api/flink/Function.md
              - Aggregator (Flink): api/flink/Aggregator.md
              - Predicate (Flink): api/flink/Predicate.md
      - Sedona with Snowflake:
          - SQL:
              - Overview (Snowflake): api/snowflake/vector-data/Overview.md
              - Constructor (Snowflake): api/snowflake/vector-data/Constructor.md
              - Function (Snowflake): api/snowflake/vector-data/Function.md
              - Aggregate Function (Snowflake): api/snowflake/vector-data/AggregateFunction.md
              - Predicate (Snowflake): api/snowflake/vector-data/Predicate.md
  - Community:
      - Community: community/contact.md
      - Contributor Guide:
          - Rules: community/rule.md
          - Develop: community/develop.md
      - Committer Guide:
          - Project Management Committee: community/contributor.md
          - Become a release manager: community/release-manager.md
          - Publish a snapshot version: community/snapshot.md
          - Make a release: community/publish.md
          - Vote a release: community/vote.md
      - Publications: community/publication.md
  - Use cases:
      - Spatially aggregate airports per country: usecases/ApacheSedonaSQL_SpatialJoin_AirportsPerCountry.ipynb
      - Match foot traffic to Seattle coffee shops: usecases/contrib/foot-traffic.ipynb
      - Raster image manipulation: usecases/ApacheSedonaRaster.ipynb
      - Read Overture Maps data: usecases/Sedona_OvertureMaps_GeoParquet.ipynb
  - Apache Software Foundation:
      - Foundation: asf/asf.md
      - License: https://www.apache.org/licenses/" target="_blank
      - Events: https://www.apache.org/events/current-event" target="_blank
      - Sponsorship: https://www.apache.org/foundation/sponsorship.html" target="_blank
      - Thanks: https://www.apache.org/foundation/thanks.html" target="_blank
      - Security: https://www.apache.org/security/" target="_blank
      - Privacy: https://privacy.apache.org/policies/privacy-policy-public.html" target="_blank
      - Telemetry: asf/telemetry.md
repo_url: https://github.com/apache/sedona
repo_name: apache/sedona
theme:
  font: false
  name: 'material'
  custom_dir: docs-overrides
  palette:
    primary: 'deep orange'
    accent: 'green'
  favicon: image/sedona_logo_symbol.png
  logo: image/sedona_logo_symbol_white.svg
  icon:
    logo: fontawesome/solid/earth-americas
    repo: fontawesome/brands/github
  features:
    - content.code.copy
    - search.highlight
    - search.share
    - search.suggest
    - navigation.footer
    - navigation.instant
    - navigation.tabs
    - navigation.top
extra:
  version:
    provider: mike
    default:
      - latest
  social:
    - icon: fontawesome/brands/github-alt
      link: 'https://github.com/apache/sedona'
    - icon: fontawesome/brands/twitter
      link: 'https://twitter.com/ApacheSedona'
    - icon: fontawesome/brands/discord
      link: 'https://share.hsforms.com/1Ndql_ZigTdmLlVQc_d1o4gqga4q'
  sedona:
    current_version: 1.7.0
    current_geotools: 1.7.0-28.5
  sedona_create_release:
    current_version: 1.7.0
    current_git_tag: sedona-1.7.0-rc1
    current_rc: 1.7.0-rc1
    current_snapshot: 1.7.1-SNAPSHOT
    next_version: 1.7.1
copyright: Copyright Â© 2024 The Apache Software Foundation. Apache Sedona, Sedona, Apache, the Apache feather logo, and the Apache Sedona project logo are either registered trademarks or trademarks of The Apache Software Foundation in the United States and other countries. All other marks mentioned may be trademarks or registered trademarks of their respective owners. Please visit <a href="https://www.apache.org/">Apache Software Foundation</a> for more details.<img referrerpolicy="no-referrer-when-downgrade" src="https://static.scarf.sh/a.png?x-pxid=f3e121f6-c909-4592-8be6-5bd345768cba" />

markdown_extensions:
  - admonition
  - attr_list
  - codehilite
  - toc:
      permalink: true
      toc_depth: 3
  - pymdownx.arithmatex
  - pymdownx.betterem:
      smart_enable: all
  - pymdownx.caret
  - pymdownx.critic
  - pymdownx.details
  - pymdownx.emoji:
      emoji_generator: !!python/name:pymdownx.emoji.to_svg
  - pymdownx.inlinehilite
  - pymdownx.magiclink
  - pymdownx.mark
  - pymdownx.smartsymbols
  - pymdownx.superfences
  - pymdownx.tabbed:
      alternate_style: true
  - pymdownx.tasklist:
      custom_checkbox: true
  - pymdownx.tilde
plugins:
  - search:
  # prebuild_index: true
  - macros
  - git-revision-date-localized:
      type: datetime
  - mkdocs-jupyter:
      include_source: True
  - mike:
      canonical_version: "latest"
