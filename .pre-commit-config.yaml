# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

---
# https://pre-commit.com/#installation
default_stages: [pre-commit, pre-push]
default_language_version:
  # force all unspecified Python hooks to run python3
  python: python3
  # force all unspecified Node hooks to run Node.js v22.17.0 LTS
  node: 22.17.0
minimum_pre_commit_version: '3.2.0'
repos:
  - repo: meta
    hooks:
      - id: identity
        name: run identity check
      - id: check-hooks-apply
        name: run check hooks apply
  - repo: https://github.com/thlorenz/doctoc.git
    rev: v2.2.0
    hooks:
      - id: doctoc
        name: Add TOC for Markdown and RST files
        files: ^README\.md$
  - repo: local
    hooks:
      - id: prettier
        name: run prettier
        description: format files with prettier
        entry: prettier --write '**/*.js' '**/*.yaml' '**/*.yml'
        files: \.(js|ya?ml)$
        language: node
        additional_dependencies: ['prettier@3.6.2']
      - id: maven-spotless-apply
        name: maven spotless apply
        description: automatically formats Java and Scala code using mvn spotless:apply.
        entry: mvn spotless:apply
        language: system # Indicates that the 'entry' command should be run directly as a system command.
        types: [java, scala] # Specifies that this hook should run on Java and Scala files.
        pass_filenames:
          false # Crucial: tells pre-commit NOT to pass filenames as arguments to 'mvn spotless:apply'.
          # Spotless typically scans the whole project based on its configuration.
        always_run:
          true # Ensures this hook runs even if no Java files are changed.
          # This is useful for spotless:apply which might affect files not staged.
        stages: [pre-commit] # Specifies that this hook runs during the 'commit' stage.
      - id: check-zip-file-is-not-committed
        name: check no zip files are committed
        description: Zip files are not allowed in the repository
        language: fail
        entry: |
          Zip files are not allowed in the repository as they are hard to
          track and have security implications. Please remove the zip file from the repository.
        files: (?i)\.zip$
      - id: check-makefiles-tabs
        name: check Makefiles files for tabs
        entry: ./scripts/pre-commit/check_makefiles_for_tabs.sh # Path to your script
        language: system
        files: '(?i)makefile$'
        pass_filenames: true # <-- Crucial change: pass filenames to the script
        types: [file] # Ensure only regular files are passed, not directories
        stages: [manual]
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.5
    hooks:
      - id: chmod
        name: set file permissions
        args: ['644']
        files: \.md$
        stages: [manual]
      - id: insert-license
        name: add license for all .c files
        files: \.c$
        args:
          - --comment-style
          - '/*|*|*/'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: add license for all .h files
        files: \.h$
        args:
          - --comment-style
          - '/*| *| */'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: add license for all Java files
        files: \.java$
        args:
          - --comment-style
          - '/*|*|*/'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: add license for all Markdown files
        files: \.md$
        args:
          - --comment-style
          - '<!--|| -->'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
        exclude: ^docs/index\.md$|^\.github/pull_request_template\.md$|\.github/issue_template\.md$|^docs/blog/.*\.md$
      - id: insert-license
        name: add license for all Makefile files
        files: ^Makefile$
        args:
          - --comment-style
          - '|#|'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: add license for all R files
        files: \.R$
        args:
          - --comment-style
          - '|#|'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: add license for all Scala files
        files: \.scala$
        args:
          - --comment-style
          - '/*| *| */'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: add license for all TOML files
        files: \.toml$
        args:
          - --comment-style
          - '|#|'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: add license for all YAML files
        files: \.ya?ml$
        args:
          - --comment-style
          - '|#|'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: add license for all Python files
        files: \.py$
        args:
          - --comment-style
          - '|#|'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: add license for all other files
        files: ^\.(editorconfig|gitattributes|prettierignore|prettierrc|shellcheckrc)$|^.*/\.gitignore$
        args:
          - --comment-style
          - '|#|'
          - --license-filepath
          - .github/workflows/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.20.0
    hooks:
      - id: pyupgrade
        args: [--py37-plus]
  - repo: https://github.com/psf/black-pre-commit-mirror
    rev: 25.1.0
    hooks:
      - id: black-jupyter
        name: run black-jupyter
        description: format Python files and Jupyter Notebooks with black
  - repo: https://github.com/pre-commit/mirrors-clang-format
    rev: v20.1.7
    hooks:
      - id: clang-format
        name: run clang-format
        description: format C files with clang-format
        args: [--style=Google]
        types_or: [c]
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        name: run bandit
        description: check Python code for security issues
        args: ['-c=pyproject.toml', '-r']
        additional_dependencies: ['bandit[toml]']
  - repo: https://github.com/codespell-project/codespell
    rev: v2.4.1
    hooks:
      - id: codespell
        name: run codespell
        description: check spelling with codespell
        args: [--ignore-words=.github/linters/codespell.txt]
        exclude: ^docs/image|^spark/common/src/test/resources|^docs/usecases|^tools/maven/scalafmt|osmpbf/build|^docker/zeppelin
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.27.2
    hooks:
      - id: gitleaks
        name: run gitleaks
        description: check for secrets with gitleaks
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: rst-backticks
        name: detect common mistake of using single backticks when writing rst
      - id: rst-directive-colons
        name: detect mistake of rst directive not ending with double colon or space before the double colon
      - id: rst-inline-touching-normal
        name: detect mistake of inline code touching normal text in rst
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-ast
        name: run check-ast
        description: check Python files for syntax errors
      - id: check-builtin-literals
        name: run check-builtin-literals
        description: check Python files for proper use of built-in literals
      - id: check-case-conflict
        name: run check-case-conflict
        description: check for case conflicts in file names
      - id: check-docstring-first
        name: run check-docstring-first
        description: check that docstrings are at the start of functions
      - id: check-executables-have-shebangs
        name: run check-executables-have-shebangs
        description: check that executable scripts have shebang lines
      - id: check-illegal-windows-names
        name: run check-illegal-windows-names
        description: check for Windows-illegal file names
      - id: check-json
        name: run check-json
        description: check JSON files for syntax errors
        exclude: ^docs/usecases/data/testPolygon\.json$|^spark/common/src/test/resources/.*\.json$
      - id: check-merge-conflict
        name: run check-merge-conflict
        description: check for merge conflict markers
      - id: check-shebang-scripts-are-executable
        name: run check-shebang-scripts-are-executable
        description: check that scripts with shebangs are executable
        exclude: ^databricks-tester/config/init_script\.j2$|^databricks-tester/smoke-tests/smoke_test\.py$
      - id: check-toml
        name: run check-toml
        description: check TOML files for syntax errors
      - id: check-vcs-permalinks
      - id: check-xml
      - id: check-yaml
        exclude: ^mkdocs\.yml$
      - id: debug-statements
      - id: destroyed-symlinks
      - id: detect-aws-credentials
        args: [--allow-missing-credentials]
      - id: detect-private-key
      - id: end-of-file-fixer
        exclude: \.svg$|^docs/image|^spark/common/src/test/resources
      - id: file-contents-sorter
        args: [--unique]
        files: ^\.github/linters/codespell\.txt$
      - id: fix-byte-order-marker
      - id: forbid-submodules
      - id: mixed-line-ending
        exclude: \.csv$
      - id: name-tests-test
        args: [--pytest-test-first]
        exclude: |
          (?x)^(
              python/tests/properties/crs_transform\.py|
              python/tests/properties/linestring_properties\.py|
              python/tests/properties/point_properties\.py|
              python/tests/properties/polygon_properties\.py|
              python/tests/sql/resource/sample_data\.py|
              python/tests/streaming/spark/cases_builder\.py|
              python/tests/tools\.py
          )$
      - id: requirements-txt-fixer
        files: ^docker/requirements\.txt$|^requirements-docs\.txt$
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
        exclude: ^docs-overrides/main\.html$|\.Rd$
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.45.0
    hooks:
      - id: markdownlint
        name: run markdownlint
        description: check Markdown files with markdownlint
        args: [--config=.github/linters/.markdown-lint.yml]
        exclude: ^\.github/.*$
        types: [markdown]
        files: \.(md|mdown|markdown)$
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: run shellcheck
        description: check Shell scripts with shellcheck
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.37.1
    hooks:
      - id: yamllint
        name: run yamllint
        description: check YAML files with yamllint
        args: [--strict, -c=.github/linters/.yaml-lint.yml]
        types: [yaml]
        files: \.ya?ml$
  - repo: https://github.com/shssoichiro/oxipng
    rev: v9.1.5
    hooks:
      - id: oxipng
        name: run oxipng
        description: check PNG files with oxipng
        args: ['--fix', '-o', '4', '--strip', 'safe', '--alpha']
  - repo: https://github.com/adamchainz/blacken-docs
    rev: 1.19.1
    hooks:
      - id: blacken-docs
        additional_dependencies: [black==25.1.0]
